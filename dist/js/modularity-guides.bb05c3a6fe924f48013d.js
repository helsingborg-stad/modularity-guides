!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";function o(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}n.r(t);(function(e){var t={info:"c-notice--info",success:"c-notice--success",danger:"c-notice--danger",warning:"c-notice--warning"};function n(e){var n;e.preventDefault();var r=e.target,i=r.closest(".js-modularity-guide-todos"),a=null==r||null===(n=r.querySelector('input[name="email"]'))||void 0===n?void 0:n.value;function l(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=i.querySelector(".js-modularity-guide-todos__notice"),l=a.querySelectorAll("c-icon"),u=a.classList,c=t[n];if(!1!==e){if(c&&!u.contains(c)&&(o(u).filter((function(e){return Object.values(t).includes(e)})).forEach((function(e){u.remove(e)})),u.add(c)),e.length>0){var d=a.querySelectorAll("span"),s=2===d.length?d[1]:d[0];s.innerHTML=e,r.length>0&&l&&(l.innerHTML=r),u.remove("u-display--none")}}else u.contains("u-display--none")||u.add("u-display--none")}l(!1);var u=null==i?void 0:i.querySelector(".js-modularity-guide-todos__table");if(u&&a&&ajaxurl){i.classList.toggle("is-loading");var c={action:"email_todo",checklist:function(e){var t,n,o=e.cloneNode(!0);null===(t=o=document.body.appendChild(o))||void 0===t||null===(n=t.querySelectorAll("tr"))||void 0===n||n.forEach((function(e){var t;(t=e).offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0||e.remove()}));var r=o.outerHTML;return o.remove(),encodeURI(r)}(u),email:a};fetch(ajaxurl,{method:"POST",credentials:"same-origin",headers:new Headers({"Content-Type":"application/x-www-form-urlencoded"}),body:new URLSearchParams(c)}).then((function(e){i.classList.toggle("is-loading"),e.json().then((function(e){e?(i.classList.toggle("is-loading"),l(guides.email_sent,"success","report"),setTimeout((function(){l(!1),i.querySelector(".js-modularity-guide-todos__modal .c-modal__close").click()}),2e3)):l(guides.email_failed,"danger","report")}))})).catch((function(e){console.log(JSON.stringify(e))}))}}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide-todos");(null==e?void 0:e.length)>0&&e.forEach((function(e,t){!function(e,t){var o;null==e||null===(o=e.querySelector(".js-modularity-guide-todos__form"))||void 0===o||o.addEventListener("submit",n)}(e)}))}))})(jQuery),function(e){function t(){this.handleEvents(),this.contentToggleEngine()}t.prototype.handleEvents=function(){e('input[type="checkbox"][data-mod-guide-relation]').on("change",(function(t){var n=e(this).data("mod-guide-relation");n=n.split(","),e.each(n,(function(t,n){var o=e('input[type="checkbox"][data-mod-guide-toggle-key="'+n+'"]');o.prop("checked",!o.prop("checked")).trigger("change")}))})),e("[data-mod-guide-toggle-key]").on("change",function(e){this.contentToggleEngine()}.bind(this))},t.prototype.contentToggleEngine=function(){var t=[];e("[data-mod-guide-toggle-key]").each((function(n,o){!0===e(o).prop("checked")&&t.push(e(o).attr("data-mod-guide-toggle-key"))})),e("[data-mod-guide-toggle-key-content]").each((function(n,o){var r=!1,i=e(o).attr("data-mod-guide-toggle-key-content");i=i.split(","),e.each(i,(function(e,n){var o=n.match(/(^|\+)([^\+\-]+)/g),i=new RegExp("\\b("+o.join("|").replace("+","")+")\\b","ig"),a=t.join(",").match(i),l=null!==a&&a.length===o.length,u=n.match(/\-([^\+\-]+)/g),c=!0;if(null!==u){var d=new RegExp("\\b("+u.join("|").replace("-","")+")\\b","ig"),s=t.join(",").match(d);c=!(null!==s&&s.length>0)}l&&c&&(r=!0)})),!0!==r?e(o).hide():e(o).show()}))},new t}(jQuery);function i(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function l(e){var t;e.preventDefault(),console.log("next prev");var n=e.target,o=e.target.classList.contains(".js-modularity-guide__next".substring(1)),r=null==n?void 0:n.closest(".js-modularity-guide"),i=null==n?void 0:n.closest(".js-modularity-guide__section"),a=parseInt(null!==(t=null==i?void 0:i.getAttribute("data-guide-step"))&&void 0!==t?t:"-1");if(a>0){var l=o?a+1:a-1,u=null==r?void 0:r.querySelector("[".concat("data-guide-step",'="').concat(l,'"]')),c=null==u?void 0:u.querySelector("[js-expand-button]");c&&c.click()}}function u(e){var t=[].concat(i(e.querySelectorAll("".concat(".js-modularity-guide__section"," ").concat(".js-modularity-guide__next"))),i(e.querySelectorAll("".concat(".js-modularity-guide__section"," ").concat(".js-modularity-guide__prev"))));t.length>0&&t.forEach((function(e){e.addEventListener("click",l)}))}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide");e&&e.length>0&&e.forEach(u)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,